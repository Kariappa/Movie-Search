{"version":3,"sources":["Components/MovieCard.js","Components/MovieList.js","Containers/App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","MovieList","useState","query","setQuery","movieData","setMovieData","event","a","preventDefault","url","length","fetch","res","json","data","results","alert","console","log","onSubmit","htmlFor","type","name","placeholder","onChange","target","value","filter","map","key","id","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sTAwBeA,EArBG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB,OACI,oCACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,cACXC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAEvB,yBAAKJ,UAAU,iBACX,wBAAIA,UAAU,eAAeD,EAAMK,OACnC,2BAAG,gDAAsBL,EAAMM,eAC/B,2BAAG,0CAAgBN,EAAMO,eACzB,uBAAGN,UAAU,cAAcD,EAAMQ,cCqCtCC,EA/CG,WAAM,MAGMC,mBAAS,IAHf,mBAGbC,EAHa,KAGNC,EAHM,OAMcF,mBAAS,IANvB,mBAMbG,EANa,KAMFC,EANE,KASdL,EAAS,uCAAG,WAAOM,GAAP,mBAAAC,EAAA,yDACdD,EAAME,iBACAC,EAFQ,kHAEyGP,EAFzG,0CAINA,EAAMQ,OAAS,GAJT,iCAMYC,MAAMF,GANlB,cAMAG,EANA,gBAOaA,EAAIC,OAPjB,OAOAC,EAPA,OAQNT,EAAaS,EAAKC,SARZ,wBAWNC,MAAM,6BAXA,0DAeVC,QAAQC,IAAR,MAfU,0DAAH,sDAmBf,OACI,oCACI,0BAAM1B,UAAU,OAAO2B,SAAUnB,GAC7B,2BAAOoB,QAAQ,QAAQ5B,UAAU,SAAjC,cACA,2BAAO6B,KAAK,OAAOC,KAAK,QAAQ9B,UAAU,QACtC+B,YAAY,iBACZC,SAAU,SAAClB,GAAD,OAAWH,EAASG,EAAMmB,OAAOC,UAE/C,4BAAQL,KAAK,SAAS7B,UAAU,UAAhC,WAEJ,yBAAKA,UAAU,aACVY,EAAUuB,QAAO,SAAApC,GAAK,OAAIA,EAAMG,eAAakC,KAAI,SAAArC,GAAK,OACnD,kBAAC,EAAD,CAAWA,MAAOA,EAAOsC,IAAKtC,EAAMuC,WC9BzCC,E,uKATX,OACE,yBAAKvC,UAAU,aACb,wBAAIA,UAAU,SAAd,gBACA,kBAAC,EAAD,W,GALUwC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.e200c090.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst MovieCard = ({ movie }) => {\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <img className=\"card--image\"\r\n                    src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n                    alt={movie.title + ' poster'}\r\n                />\r\n                <div className='card--content'>\r\n                    <h3 className=\"card--title\">{movie.title}</h3>\r\n                    <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n                    <p><small>RATING: {movie.vote_average}</small></p>\r\n                    <p className=\"card--desc\">{movie.overview}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default MovieCard","import React, { useState } from 'react';\r\nimport MovieCard from './MovieCard'\r\n\r\n\r\n\r\nconst MovieList = () => {\r\n\r\n    //State for SearchBar\r\n    const [query, setQuery] = useState('');\r\n\r\n    //State for Movie Info\r\n    const [movieData, setMovieData] = useState([])\r\n\r\n\r\n    const MovieList = async (event) => {\r\n        event.preventDefault();\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=a29a72c46fa17fa3fe5fcf7e58bfb531&language=en-US&query=${query}&page=1&include_adult=false`;\r\n        try {\r\n            if (query.length > 0) {\r\n\r\n                const res = await fetch(url)\r\n                const data = await res.json()\r\n                setMovieData(data.results);\r\n            }\r\n            else {\r\n                alert(\"Please enter a movie name\")\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className='form' onSubmit={MovieList}>\r\n                <label htmlFor='query' className='label'>Movie Name</label>\r\n                <input type='text' name='query' className='input'\r\n                    placeholder='i.e. Spiderman'\r\n                    onChange={(event) => setQuery(event.target.value)}></input>\r\n\r\n                <button type='submit' className='button'>Search</button>\r\n            </form>\r\n            <div className='card-list'>\r\n                {movieData.filter(movie => movie.poster_path).map(movie => (\r\n                    <MovieCard movie={movie} key={movie.id} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieList","import React from 'react';\nimport './App.css';\nimport MovieList from '../Components/MovieList'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className='container'>\n        <h1 className=\"title\">Movie Search</h1>\n        <MovieList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}